// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestaurantApp.Infrastructure.Persistence;

#nullable disable

namespace RestaurantApp.Infrastructure.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    partial class RestaurantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestaurantApp.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_categories_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_categories_name");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("RestaurantApp.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<int>("TableId")
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_orders_created_at");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_orders_session_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_orders_status");

                    b.HasIndex("TableId")
                        .HasDatabaseName("ix_orders_table_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("RestaurantApp.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("failure_reason");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_payments_created_at");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_payments_order_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_payments_status");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("ix_payments_transaction_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("RestaurantApp.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Allergens")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("allergens");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_available");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("IsAvailable")
                        .HasDatabaseName("ix_products_is_available");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_products_name");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("RestaurantApp.Domain.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("tables", (string)null);
                });

            modelBuilder.Entity("RestaurantApp.Domain.Entities.Order", b =>
                {
                    b.OwnsOne("RestaurantApp.Domain.ValueObjects.Price", "Total", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("total_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("total_currency");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsMany("RestaurantApp.Domain.Entities.OrderLine", "Lines", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("product_id");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("product_name");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("quantity");

                            b1.Property<Guid?>("order_id")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId")
                                .HasDatabaseName("ix_order_lines_product_id");

                            b1.HasIndex("order_id");

                            b1.ToTable("order_lines", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("order_id");

                            b1.OwnsOne("RestaurantApp.Domain.ValueObjects.Price", "Subtotal", b2 =>
                                {
                                    b2.Property<Guid>("OrderLineId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("subtotal_amount");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("character varying(3)")
                                        .HasColumnName("subtotal_currency");

                                    b2.HasKey("OrderLineId");

                                    b2.ToTable("order_lines");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderLineId");
                                });

                            b1.OwnsOne("RestaurantApp.Domain.ValueObjects.Price", "UnitPrice", b2 =>
                                {
                                    b2.Property<Guid>("OrderLineId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("unit_price_amount");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("character varying(3)")
                                        .HasColumnName("unit_price_currency");

                                    b2.HasKey("OrderLineId");

                                    b2.ToTable("order_lines");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderLineId");
                                });

                            b1.Navigation("Subtotal")
                                .IsRequired();

                            b1.Navigation("UnitPrice")
                                .IsRequired();
                        });

                    b.Navigation("Lines");

                    b.Navigation("Total")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.Domain.Entities.Payment", b =>
                {
                    b.OwnsOne("RestaurantApp.Domain.ValueObjects.Price", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("currency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.Domain.Entities.Product", b =>
                {
                    b.OwnsOne("RestaurantApp.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("price_currency");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.Domain.Entities.Table", b =>
                {
                    b.OwnsOne("RestaurantApp.Domain.Entities.TableSession", "ActiveSession", b1 =>
                        {
                            b1.Property<int>("TableId")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("EndedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("session_ended_at");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("active_session_id");

                            b1.Property<DateTime>("StartedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("session_started_at");

                            b1.HasKey("TableId");

                            b1.ToTable("tables");

                            b1.WithOwner()
                                .HasForeignKey("TableId");
                        });

                    b.Navigation("ActiveSession");
                });
#pragma warning restore 612, 618
        }
    }
}
